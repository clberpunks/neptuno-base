A continuación, te presento un boilerplate base que estoy creando con Next.js en el frontend y FastAPI en el backend, utilizando postgre como base de datos, 
autenticación segura con OAuth2, JWT y logging básico. 

Aqui tienes todos los archivos del proyecto para que los estudies:

..
├── backend
│   ├── admin.py
│   ├── auth.py
│   ├── config.py
│   ├── db.py
│   ├── dependencies.py
│   ├── main.py
│   ├── models.py
│   ├── requirements.txt
│   ├── run.sh
│   ├── schemas.py
│   ├── user.py
│   └── utils.py
├── frontend
│   ├── components
│   │   ├── AccessHistory.tsx
│   │   ├── Footer.tsx
│   │   ├── Layout.tsx
│   │   ├── Navbar.tsx
│   │   └── Sidebar.tsx
│   ├── hooks
│   │   └── useAuth.tsx
│   ├── next.config.js
│   ├── next-env.d.ts
│   ├── next-i18next.config.js
│   ├── package.json
│   ├── package-lock.json
│   ├── pages
│   │   ├── about.tsx
│   │   ├── admin.tsx
│   │   ├── api
│   │   │   └── auth
│   │   │       └── logout.ts
│   │   ├── _app.tsx
│   │   ├── auth
│   │   │   ├── login.tsx
│   │   │   ├── logout.tsx
│   │   │   └── register.tsx
│   │   ├── contact.tsx
│   │   ├── dashboard.tsx
│   │   ├── features.tsx
│   │   ├── index.tsx
│   │   ├── privacy.tsx
│   │   └── terms.tsx
│   ├── postcss.config.js
│   ├── public
│   │   └── locales
│   │       ├── en
│   │       │   └── common.json
│   │       └── es
│   │           └── common.json
│   ├── styles
│   │   └── globals.css
│   ├── tailwind.config.js
│   ├── tailwind.config.ts
│   └── tsconfig.json

Aqui tienes los archivos de configuracion



Ahora te paso todos los archivos uno a uno, con el nombre y ubicación del archivo en cada pagina

# backend/admin.py
from fastapi import APIRouter, Depends
from dependencies import get_current_user
from schemas import UserInJWT, UserRole
from fastapi import HTTPException, status

router = APIRouter(prefix="/admin", tags=["admin"])

@router.get("/overview")
def admin_overview(current_user: UserInJWT = Depends(get_current_user)):
    if current_user.role != UserRole.admin:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Acceso denegado")
    return {"message": f"Bienvenido {current_user.name}, eres admin."}


# /backend/auth.py
import uuid
from fastapi import APIRouter, Depends, HTTPException, Request
from fastapi.responses import RedirectResponse
import httpx
from datetime import datetime
import json
from sqlalchemy.orm import Session
from schemas import UserLogin, UserRegister
from utils import hash_password, verify_password
from models import User, UserRole
from config import settings
from db import get_db
from models import User, LoginHistory
from fastapi.responses import JSONResponse

router = APIRouter(tags=["auth"])
# /backend/auth.py


@router.get("/auth/login")
def login():
    url = ("https://accounts.google.com/o/oauth2/v2/auth"
           f"?client_id={settings.GOOGLE_CLIENT_ID}"
           f"&redirect_uri={settings.GOOGLE_REDIRECT_URI}"
           "&response_type=code"
           "&scope=openid%20email%20profile")
    return RedirectResponse(url)


@router.get("/auth/callback")
async def callback(request: Request, db: Session = Depends(get_db)):
    code = request.query_params.get("code")
    if not code:
        raise HTTPException(status_code=400, detail="Missing code")
    # 1) Pedir token a Google:
    async with httpx.AsyncClient() as client:
        token_res = await client.post(
            "https://oauth2.googleapis.com/token",
            data={
                "code": code,
                "client_id": settings.GOOGLE_CLIENT_ID,
                "client_secret": settings.GOOGLE_CLIENT_SECRET,
                "redirect_uri": settings.GOOGLE_REDIRECT_URI,
                "grant_type": "authorization_code",
            },
            headers={"Content-Type": "application/x-www-form-urlencoded"},
            timeout=10,
        )
        if token_res.status_code != 200:
            raise HTTPException(status_code=500,
                                detail="Error obteniendo token")
        token_data = token_res.json()
        access_token = token_data.get("access_token")
        id_token = token_data.get("id_token")

        userinfo_res = await client.get(
            "https://www.googleapis.com/oauth2/v3/userinfo",
            headers={"Authorization": f"Bearer {access_token}"},
            timeout=10,
        )
        if userinfo_res.status_code != 200:
            raise HTTPException(status_code=500,
                                detail="Error obteniendo userinfo")
        google_user = userinfo_res.json()

    # 2) Registrar o actualizar usuario en DB:
    now = datetime.utcnow()
    user = db.query(User).filter(User.id == google_user["sub"]).first()
    if user:
        user.last_login = now
    else:
        user = User(
            id=google_user["sub"],
            name=google_user["name"],
            email=google_user["email"],
            picture=google_user.get("picture") or "https://ui-avatars.com/api/?name=" + google_user["name"], #picture=google_user.get("picture"),
            role=UserRole.user,  # rol por defecto
            created_at=now,
            last_login=now)
        db.add(user)
    db.commit()

    # 3) Registrar historial de accesos:
    login_record = LoginHistory(user_id=user.id,
                                ip_address=request.client.host,
                                login_method="google")
    db.add(login_record)
    db.commit()

    # 4) Armar respuesta redirigiendo e insertando cookies
    response = RedirectResponse(url="http://localhost:3000/dashboard")
    response.set_cookie("id_token", id_token, httponly=True, samesite="none")
    response.set_cookie("user_info",
                        json.dumps({
                            "id": user.id,
                            "name": user.name,
                            "email": user.email,
                            "picture": user.picture,
                            "role": user.role.value,
                            "created_at": user.created_at.isoformat(),
                            "last_login": user.last_login.isoformat()
                        }),
                        httponly=True,
                        samesite="none")
    return response


@router.get("/auth/user")
def get_user_info(request: Request):
    user_info = request.cookies.get("user_info")
    return user_info


@router.get("/auth/logout")
def logout():
    response = RedirectResponse(url="/")
    response.delete_cookie("id_token")
    response.delete_cookie("user_info")
    return response


@router.post("/auth/register")
def register_user(data: UserRegister, db: Session = Depends(get_db)):
    if db.query(User).filter_by(email=data.email).first():
        raise HTTPException(status_code=400, detail="Email ya registrado")
    new_user = User(id=str(uuid.uuid4()),
                    email=data.email,
                    name=data.name,
                    picture= "https://ui-avatars.com/api/?name=" + data.name,
                    password_hash=hash_password(data.password),
                    auth_method="local")
    db.add(new_user)
    db.commit()
    return {"message": "Usuario creado correctamente"}




@router.post("/auth/login")
def login_user(data: UserLogin,
               request: Request,
               db: Session = Depends(get_db)):
    user = db.query(User).filter_by(email=data.email,
                                    auth_method="local").first()
    if not user or not verify_password(data.password, user.password_hash):
        raise HTTPException(status_code=401, detail="Credenciales incorrectas")

    now = datetime.utcnow()
    user.last_login = now
    db.commit()

    login_record = LoginHistory(user_id=user.id,
                                ip_address=request.client.host,
                                login_method="local")
    db.add(login_record)
    db.commit()

    response = JSONResponse(content={"message": "Login exitoso"})
    response.set_cookie("user_info", json.dumps({
        "id": user.id,
        "name": user.name,
        "email": user.email,
        "picture": user.picture,
        "role": user.role.value,
        "created_at": user.created_at.isoformat(),
        "last_login": user.last_login.isoformat()
    }), httponly=True, samesite="none")
    return response


@router.post("/auth/register")
def register_user(data: UserRegister, db: Session = Depends(get_db)):
    if db.query(User).filter_by(email=data.email).first():
        raise HTTPException(status_code=400, detail="Email ya registrado")
    new_user = User(id=str(uuid.uuid4()),
                    email=data.email,
                    name=data.name,
                    password_hash=hash_password(data.password),
                    auth_method="local")
    db.add(new_user)
    db.commit()
    return {"message": "Usuario creado correctamente"}

    # @router.post("/auth/login", operation_id="login_user")
    # def login_user(data: UserLogin, request: Request, db: Session = Depends(get_db)):
    #     user = db.query(User).filter_by(email=data.email, auth_method="local").first()
    #     if not user or not verify_password(data.password, user.password_hash):
    #         raise HTTPException(status_code=401, detail="Credenciales incorrectas")
    #
    #     now = datetime.utcnow()
    #     user.last_login = now
    #     db.commit()
    #
    #     login_record = LoginHistory(
    #         user_id=user.id,
    #         ip_address=request.client.host,
    #         login_method="local"
    #     )
    #     db.add(login_record)
    #     db.commit()
    #
    #     response = RedirectResponse(url="http://localhost:3000/dashboard")
    #     response.set_cookie("user_info", json.dumps({
    #         "id": user.id,
    #         "name": user.name,
    #         "email": user.email,
    #         "picture": user.picture,
    #         "role": user.role.value,
    #         "created_at": user.created_at.isoformat(),
    #         "last_login": user.last_login.isoformat()
    #     }), httponly=True, samesite="none")
    #     return response



@router.get("/auth/access-history")
def access_history(request: Request, db: Session = Depends(get_db)):
    user_info_cookie = request.cookies.get("user_info")
    if not user_info_cookie:
        raise HTTPException(status_code=401, detail="No autenticado")

    try:
        user_data = json.loads(user_info_cookie)
        user_id = user_data.get("id")
        if not user_id:
            raise HTTPException(status_code=400, detail="ID de usuario no válido")
    except Exception:
        raise HTTPException(status_code=400, detail="Error leyendo cookie de usuario")

    history = db.query(LoginHistory).filter_by(user_id=user_id).order_by(LoginHistory.timestamp.desc()).all()
    return [{
        "timestamp": h.timestamp.isoformat(),
        "ip_address": h.ip_address,
        "login_method": h.login_method
    } for h in history]


# backend/config.py
import os
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    APP_NAME: str = "Ciberpunk"
    GOOGLE_CLIENT_ID: str
    GOOGLE_CLIENT_SECRET: str
    GOOGLE_REDIRECT_URI: str = "http://localhost:8001/auth/callback"
    DATABASE_URL: str = "sqlite:///./app.db"
    CLIENT_SECRET: str = "your_client_secret_here"  
    
    class Config:
        env_file = ".env"

settings = Settings()


# backend/db.py
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session

from config import settings
# backend/db.py
engine = create_engine(settings.DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(bind=engine, autoflush=False, autocommit=False)
Base = declarative_base()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


# backend/dependencies.py
from fastapi import Depends, HTTPException, status, Request
import json
from schemas import UserInJWT

def get_current_user(request: Request) -> UserInJWT:
    cookie = request.cookies.get("user_info")
    if not cookie:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="No autenticado")
    try:
        user_dict = json.loads(cookie)
        return UserInJWT(**user_dict)
    except Exception:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Cookie inválida")

# backend/main.py
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from auth import router as auth_router
from utils import hash_password
from user import router as user_router
from admin import router as admin_router

from db import engine, Base, SessionLocal
from models import User, UserRole
from sqlalchemy.orm import Session
from sqlalchemy.exc import IntegrityError
import uuid

app = FastAPI()

origins = ["http://localhost:3000" ]



app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.include_router(auth_router)
app.include_router(user_router)
app.include_router(admin_router)


# Evento de inicio que crea tablas y usuarios de ejemplo
@app.on_event("startup")
def startup_event():
    Base.metadata.create_all(bind=engine)

    db: Session = SessionLocal()
    try:
        if not db.query(User).filter_by(email="user@example.com").first():
            user = User(
                id=str(uuid.uuid4()),
                email="user@example.com",
                name="Ejemplo User",
                password_hash=hash_password("123456"),
                auth_method="local",
                role=UserRole.user,
                picture=None,
            )
            db.add(user)

        if not db.query(User).filter_by(email="admin@example.com").first():
            admin = User(
                id=str(uuid.uuid4()),
                email="admin@example.com",
                name="Ejemplo Admin",
                password_hash=hash_password("123456"),
                auth_method="local",
                role=UserRole.admin,
                picture=None,
            )
            db.add(admin)

        db.commit()
    except IntegrityError:
        db.rollback()
    finally:
        db.close()

# /backend/models.py
from sqlalchemy import Column, Integer, String, DateTime, Enum, ForeignKey
from sqlalchemy.orm import relationship
from datetime import datetime
import enum
from sqlalchemy import Column, String, DateTime, ForeignKey
from sqlalchemy.orm import relationship
from db import Base
from datetime import datetime
import uuid


class UserRole(str, enum.Enum):
    admin = "admin"
    user = "user"

class User(Base):
    __tablename__ = "users"

    id = Column(String, primary_key=True, index=True)
    name = Column(String)
    email = Column(String, unique=True, index=True)
    password_hash = Column(String, nullable=True) 
    picture = Column(String)
    role = Column(Enum(UserRole), default=UserRole.user)
    auth_method = Column(String, default="google")  # "google" o "local"
    created_at = Column(DateTime, default=datetime.utcnow)
    last_login = Column(DateTime, default=datetime.utcnow)

    login_history = relationship("LoginHistory", back_populates="user")

class LoginHistory(Base):
    __tablename__ = "login_history"

    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    user_id = Column(String, ForeignKey("users.id"))
    timestamp = Column(DateTime, default=datetime.utcnow)
    ip_address = Column(String)
    login_method = Column(String)

    user = relationship("User", back_populates="login_history")


// requirements.txt

aiosqlite==0.21.0
alembic==1.16.1
annotated-types==0.7.0
anyio==4.9.0
certifi==2025.4.26
click==8.2.1
dnspython==2.7.0
dotenv==0.9.9
email_validator==2.2.0
exceptiongroup==1.3.0
fastapi==0.115.12
greenlet==3.2.2
h11==0.16.0
httpcore==1.0.9
httpx==0.28.1
idna==3.10
Mako==1.3.10
MarkupSafe==3.0.2
passlib==1.7.4
pydantic==2.11.5
pydantic-settings==2.9.1
pydantic_core==2.33.2
python-dotenv==1.1.0
sniffio==1.3.1
SQLAlchemy==2.0.41
starlette==0.46.2
tomli==2.2.1
typing-inspection==0.4.1
typing_extensions==4.14.0
uvicorn==0.34.3


# backend/schemas.py
from pydantic import BaseModel, EmailStr
from datetime import datetime
from enum import Enum

class UserRole(str, Enum):
    admin = "admin"
    user = "user"

class UserInJWT(BaseModel):
    id: str
    name: str
    email: str
    picture: str | None
    role: UserRole
    created_at: datetime
    last_login: datetime


class UserRegister(BaseModel):
    name: str
    email: EmailStr
    password: str

class UserLogin(BaseModel):
    email: EmailStr
    password: str



# backend/user.py
from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session
from dependencies import get_current_user
from db import get_db
from models import LoginHistory, User

router = APIRouter(prefix="/user", tags=["user"])

@router.get("/access-history")
def get_access_history(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    history = (
        db.query(LoginHistory)
        .filter(LoginHistory.user_id == current_user.id)
        .order_by(LoginHistory.timestamp.desc())
        .all()
    )
    return [
        {
            "id": str(entry.id),
            "timestamp": entry.timestamp.isoformat(),
            "ip_address": entry.ip_address,
            "login_method": entry.login_method
        }
        for entry in history
    ]


# backend/utils.py
from passlib.context import CryptContext

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def hash_password(password: str) -> str:
    return pwd_context.hash(password)

def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)


Hasta aqui el codigo fuente del backend, ahora va el codigo fuente del frontend

// frontend/components/AccessHistory.tsx
import { useEffect, useState } from "react";
import { useAuth } from "../hooks/useAuth";
import { useTranslation } from "next-i18next";

export default function AccessHistory() {
  const { t } = useTranslation();
  const { user } = useAuth();
  const [history, setHistory] = useState<
    {
      id: string;
      timestamp: string;
      ip_address: string;
      login_method: string;
    }[]
  >([]);

  useEffect(() => {
    if (!user) return;
    fetch("http://localhost:8001/user/access-history", {
      credentials: "include",
    })
      .then((res) => res.json())
      .then((data) => setHistory(data));
  }, [user]);

  if (!user) return null;
  return (
    <div>
      <h2 className="text-xl font-semibold mb-2">{t("login_history")}</h2>
      <ul className="list-disc list-inside">
        {history.map((entry) => (
          <li key={entry.id}>
            {new Date(entry.timestamp).toLocaleString()} — {entry.ip_address} —{" "}
            {entry.login_method}
          </li>
        ))}
      </ul>
    </div>
  );
}



// components/Footer.tsx
const Footer = () => (
  <footer className="bg-gray-900 text-gray-400 py-6">
    <div className="container mx-auto px-4 flex flex-col md:flex-row justify-between items-center">
      <div className="mb-4 md:mb-0">
        © 2025 MyApp. {new Date().getFullYear()} 
      </div>
      <div className="flex space-x-6">
        <a href="/terms" className="hover:text-white transition-colors duration-200">Terms</a>
        <a href="/privacy" className="hover:text-white transition-colors duration-200">Privacy</a>
        <a href="/contact" className="hover:text-white transition-colors duration-200">Contact</a>
      </div>
    </div>
  </footer>
);

export default Footer;


// components/Layout.tsx
// components/Layout.tsx - ACTUALIZADO
import Navbar from './Navbar';
import Footer from './Footer';
import { useRouter } from 'next/router';

const Layout = ({ children }: { children: React.ReactNode }) => {
  const router = useRouter();
  
  // Excluir layout para rutas específicas
  const noLayoutRoutes = ['/auth/login', '/dashboard', '/dashboard/profile', '/dashboard/logins', '/dashboard/summary', '/auth/register', '/auth/forgot-password', '/auth/reset-password'];
  const shouldUseLayout = !noLayoutRoutes.includes(router.pathname);

  return shouldUseLayout ? (
    <div className="flex flex-col min-h-screen bg-gray-50">
      <Navbar />
      <main className="flex-grow pt-16 pb-8">
        {children}
      </main>
      <Footer />
    </div>
  ) : (
    <>{children}</>
  );
};

export default Layout;


// components/Navbar.tsx
// components/Navbar.tsx  
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { useTranslation } from 'next-i18next';

const Navbar = () => {
  const router = useRouter();
  const [user, setUser] = useState(null);
  const { t } = useTranslation();

  useEffect(() => {
    fetch('http://localhost:8001/auth/user', {
      credentials: 'include'
    })
      .then(res => res.ok ? res.json() : null)
      .then(data => {
        if (data) setUser(JSON.parse(data));
        else setUser(null);
      });
  }, []);

  const changeLang = (locale: string) => {
    router.push(router.pathname, router.asPath, { locale });
  };

  return (
    <header className="bg-white shadow-sm fixed top-0 w-full z-50">
      <div className="container mx-auto px-4 py-3 flex justify-between items-center">
        <div className="flex items-center space-x-10">
          <Link href="/" className="font-bold text-xl text-indigo-600">
            MyApp
          </Link>
          <nav className="hidden md:flex space-x-8">
            <Link href="/about" className="text-gray-700 hover:text-indigo-600 transition-colors">
              {t('about')}
            </Link>
            <Link href="/contact" className="text-gray-700 hover:text-indigo-600 transition-colors">
              {t('contact')}
            </Link>
            <Link href="/features" className="text-gray-700 hover:text-indigo-600 transition-colors">
              {t('features')}
            </Link>
          </nav>
        </div>
        
        <div className="flex items-center space-x-4">
          <div className="flex space-x-2 border-r border-gray-200 pr-4">
            <button 
              onClick={() => changeLang('en')} 
              className={`text-sm ${router.locale === 'en' ? 'font-medium text-indigo-600' : 'text-gray-500'}`}
              aria-label="Switch to English"
            >
              EN
            </button>
            <button 
              onClick={() => changeLang('es')} 
              className={`text-sm ${router.locale === 'es' ? 'font-medium text-indigo-600' : 'text-gray-500'}`}
              aria-label="Cambiar a Español"
            >
              ES
            </button>
          </div>
          
          {user ? (
            <Link href="/dashboard" className="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors">
              {t('dashboard')}
            </Link>
          ) : (
            <Link href="/auth/login" className="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors">
              {t('login')}
            </Link>
          )}
        </div>
      </div>
    </header>
  );
};

export default Navbar;


// components/Sidebar.tsx
// components/Sidebar.tsx
import { useTranslation } from 'next-i18next';
import { useRouter } from 'next/router';
import Link from 'next/link';

interface Props {
  onSelect: (section: 'summary' | 'profile' | 'logins') => void;
  currentSection: string;
}

export default function Sidebar({ onSelect, currentSection }: Props) {
  const { t } = useTranslation();
  const router = useRouter();

  const isActive = (section: string) => 
    currentSection === section ? 'bg-indigo-50 text-indigo-700 border-l-4 border-indigo-600' : 'text-gray-700 hover:bg-gray-100';

  return (
    <aside className="w-full md:w-64 bg-white border-r border-gray-200 flex flex-col">
      <div className="p-6 border-b border-gray-200">
        <Link href="/" legacyBehavior>
          <a className="flex items-center text-lg font-semibold text-indigo-600">
            <svg className="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
            </svg>
            {t('app_name')}
          </a>
        </Link>
      </div>
      
      <div className="p-6 border-b border-gray-200 flex items-center">
        <img 
          src="https://via.placeholder.com/40" 
          alt="User" 
          className="rounded-full w-10 h-10 mr-3"
        />
        <div>
          <p className="font-medium text-gray-900 truncate">Nombre Usuario</p>
          <p className="text-sm text-gray-500 truncate">usuario@email.com</p>
        </div>
      </div>
      
      <nav className="py-4 flex-grow">
        <button 
          onClick={() => onSelect('summary')} 
          className={`w-full text-left px-6 py-3 flex items-center ${isActive('summary')}`}
          aria-current={currentSection === 'summary' ? 'page' : undefined}
        >
          <svg className="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 8v8m-4-5v5m-4-2v2m-2 4h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          {t('summary')}
        </button>
        
        <button 
          onClick={() => onSelect('profile')} 
          className={`w-full text-left px-6 py-3 flex items-center ${isActive('profile')}`}
          aria-current={currentSection === 'profile' ? 'page' : undefined}
        >
          <svg className="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
          </svg>
          {t('profile')}
        </button>
        
        <button 
          onClick={() => onSelect('logins')} 
          className={`w-full text-left px-6 py-3 flex items-center ${isActive('logins')}`}
          aria-current={currentSection === 'logins' ? 'page' : undefined}
        >
          <svg className="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
          </svg>
          {t('access')}
        </button>
      </nav>
      
      <div className="p-4 border-t border-gray-200 mt-auto">
        <a 
          href="/auth/logout" 
          className="w-full text-left px-6 py-3 flex items-center text-red-600 hover:bg-red-50 rounded-md"
        >
          <svg className="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
          </svg>
          {t('logout')}
        </a>
      </div>
    </aside>
  );
}

// frontend/hooks/useAuth.ts
import { useState, useEffect, useContext, createContext, ReactNode } from 'react';

interface User {
  id: string;
  name: string;
  email: string;
  picture: string;
  role: "admin" | "user";
  created_at: string;
  last_login: string;
}

interface AuthContextType {
  user: User | null;
  loading: boolean;
  refresh: () => void;
}

const AuthContext = createContext<AuthContextType>({ user: null, loading: true, refresh: () => {} });

export function AuthProvider({ children }: { children: ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  const loadUser = () => {
    setLoading(true);
    fetch("http://localhost:8001/auth/user", { credentials: "include" })
      .then(res => (res.ok ? res.json() : null))
      .then(data => setUser(data ?? null)) //.then(data => setUser(data ? JSON.parse(data) : null))
      .catch(() => setUser(null))
      .finally(() => setLoading(false));
  };

  useEffect(() => {
    loadUser();
  }, []);

  return (
    <AuthContext.Provider value={{ user, loading, refresh: loadUser }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  return useContext(AuthContext);
}


// frontend/pages/api/auth/logout.ts
// API route: elimina las cookies y redirige
import type { NextApiRequest, NextApiResponse } from 'next';
import { serialize } from 'cookie';

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  res.setHeader('Set-Cookie', [
    serialize('id_token', '', { path: '/', maxAge: -1 }),
    serialize('user_info', '', { path: '/', maxAge: -1 }),
  ]);
  res.status(200).json({ success: true });
}


// pages/auth/login.tsx
// pages/auth/login.tsx
import { useState } from "react";
import { useRouter } from "next/router";

export default function LoginPage() {
  const router = useRouter();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [remember, setRemember] = useState(false);
  const [loading, setLoading] = useState(false);

  const [isRedirecting, setIsRedirecting] = useState(false);
  const [error, setError] = useState("");

  const validateEmail = (email: string) =>
    /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");

    if (!validateEmail(email)) {
      setError("Introduce un correo válido");
      return;
    }
    if (!password) {
      setError("Introduce una contraseña");
      return;
    }

    setLoading(true);

    try {
      const res = await fetch("http://localhost:8001/auth/login", {
        method: "POST",
        credentials: "include",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ email, password, remember }),
      });

      if (!res.ok) {
        throw new Error("Credenciales incorrectas");
      } else {
        router.push("/dashboard");
      }

      router.replace("/dashboard");
    } catch (err: any) {
      setError(err.message || "Error desconocido");
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleLogin = () => {
    setIsRedirecting(true);
    fetch("http://localhost:8001/auth/user", {
      credentials: "include",
    })
      .then((res) => (res.ok ? res.json() : null))
      .then((data) => {
        if (data) {
          router.replace("/dashboard");
        } else {
          window.location.href = "http://localhost:8001/auth/login";
        }
      })
      .catch((err) => {
        setIsRedirecting(false);
        setError("Error al iniciar sesión. Inténtalo de nuevo.");
        console.error("Login error:", err);
      });
  };

  return (
    <div className="min-h-screen flex">
      {/* Panel izquierdo - Contenido */}
      <div className="w-full md:w-1/2 flex flex-col justify-center items-center p-8 bg-gray-50">
        <div className="max-w-md w-full">
          <div className="mb-12 text-center">
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              Accede a tu cuenta
            </h1>
            <p className="text-gray-600">
              Gestiona todos tus servicios en un solo lugar
            </p>
          </div>

          <div className="bg-white p-8 rounded-xl shadow-sm border border-gray-200">
            {error && (
              <div className="mb-4 p-3 bg-red-50 text-red-700 rounded-lg text-sm">
                {error}
              </div>
            )}
            <form className="space-y-6" onSubmit={handleSubmit} noValidate>
              <div className="space-y-6">
                <button
                  onClick={handleGoogleLogin}
                  disabled={isRedirecting}
                  className="w-full flex items-center justify-center gap-3 bg-white border border-gray-300 rounded-lg py-3 px-4 font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50"
                >
                  <svg
                    className="h-5 w-5"
                    viewBox="0 0 24 24"
                    width="24"
                    height="24"
                  >
                    <g transform="matrix(1, 0, 0, 1, 27.009001, -39.238998)">
                      <path
                        fill="#4285F4"
                        d="M -3.264 51.509 C -3.264 50.719 -3.334 49.969 -3.454 49.239 L -14.754 49.239 L -14.754 53.749 L -8.284 53.749 C -8.574 55.229 -9.424 56.479 -10.684 57.329 L -10.684 60.329 L -6.824 60.329 C -4.564 58.239 -3.264 55.159 -3.264 51.509 Z"
                      />
                      <path
                        fill="#34A853"
                        d="M -14.754 63.239 C -11.514 63.239 -8.804 62.159 -6.824 60.329 L -10.684 57.329 C -11.764 58.049 -13.134 58.489 -14.754 58.489 C -17.884 58.489 -20.534 56.379 -21.484 53.529 L -25.464 53.529 L -25.464 56.619 C -23.494 60.539 -19.444 63.239 -14.754 63.239 Z"
                      />
                      <path
                        fill="#FBBC05"
                        d="M -21.484 53.529 C -21.734 52.809 -21.864 52.039 -21.864 51.239 C -21.864 50.439 -21.724 49.669 -21.484 48.949 L -21.484 45.859 L -25.464 45.859 C -26.284 47.479 -26.754 49.299 -26.754 51.239 C -26.754 53.179 -26.284 54.999 -25.464 56.619 L -21.484 53.529 Z"
                      />
                      <path
                        fill="#EA4335"
                        d="M -14.754 43.989 C -12.984 43.989 -11.404 44.599 -10.154 45.789 L -6.734 42.369 C -8.804 40.429 -11.514 39.239 -14.754 39.239 C -19.444 39.239 -23.494 41.939 -25.464 45.859 L -21.484 48.949 C -20.534 46.099 -17.884 43.989 -14.754 43.989 Z"
                      />
                    </g>
                  </svg>
                  {isRedirecting
                    ? "Redirigiendo..."
                    : "Iniciar sesión con Google"}
                </button>

                <div className="relative mt-6">
                  <div className="absolute inset-0 flex items-center">
                    <div className="w-full border-t border-gray-300"></div>
                  </div>
                  <div className="relative flex justify-center text-sm">
                    <span className="px-2 bg-white text-gray-500">
                      O continúa con
                    </span>
                  </div>
                </div>

                <div>
                  <label
                    htmlFor="email"
                    className="block text-sm font-medium text-gray-700"
                  >
                    Correo electrónico
                  </label>
                  <input
                    id="email"
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    required
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                    autoComplete="email"
                  />
                </div>

                <div>
                  <label
                    htmlFor="password"
                    className="block text-sm font-medium text-gray-700"
                  >
                    Contraseña
                  </label>
                  <input
                    id="password"
                    type="password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    required
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                    autoComplete="current-password"
                  />
                </div>

                <div className="flex items-center">
                  <input
                    id="remember"
                    type="checkbox"
                    checked={remember}
                    onChange={() => setRemember(!remember)}
                    className="h-4 w-4 text-indigo-600 border-gray-300 rounded"
                  />
                  <label
                    htmlFor="remember"
                    className="ml-2 block text-sm text-gray-700"
                  >
                    Recordar sesión
                  </label>
                </div>

                <button
                  type="submit"
                  className="w-full bg-indigo-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-indigo-700 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50"
                  disabled={loading}
                >
                  {loading ? "Iniciando sesión..." : "Iniciar sesión"}
                </button>
              </div>
            </form>

            <div className="mt-6 text-center">
              <p className="text-sm text-gray-600">
                ¿No tienes cuenta?{" "}
                <a
                  href="/auth/register"
                  className="font-medium text-indigo-600 hover:text-indigo-500"
                >
                  Regístrate
                </a>
              </p>
            </div>
          </div>

          <div className="mt-8 text-center text-sm text-gray-600">
            © 2025 MyApp. Todos los derechos reservados.
          </div>
        </div>
      </div>

      {/* Panel derecho */}
      <div className="hidden md:block w-1/2 bg-gradient-to-br from-indigo-600 to-indigo-800 relative">
        <div className="absolute inset-0 flex items-center justify-center p-12">
          <div className="text-white max-w-lg">
            <h2 className="text-4xl font-bold mb-4">
              Potencia tu productividad
            </h2>
            <p className="text-xl mb-8">
              Conecta todas tus herramientas en una sola plataforma y optimiza
              tu flujo de trabajo diario.
            </p>
            <ul className="space-y-3">
              <li className="flex items-center">
                <svg
                  className="h-6 w-6 mr-2"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M5 13l4 4L19 7"
                  />
                </svg>
                Integraciones con Google Workspace
              </li>
              <li className="flex items-center">
                <svg
                  className="h-6 w-6 mr-2"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M5 13l4 4L19 7"
                  />
                </svg>
                Seguridad empresarial
              </li>
              <li className="flex items-center">
                <svg
                  className="h-6 w-6 mr-2"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M5 13l4 4L19 7"
                  />
                </svg>
                Soporte 24/7
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
}


// pages/auth/logout.ts
// Página que ejecuta logout y redirige al home
import { useEffect } from 'react';
import { useRouter } from 'next/router';

export default function LogoutPage() {
  const router = useRouter();

  useEffect(() => {
    fetch('/api/auth/logout', {
      method: 'POST',
      credentials: 'include'
    })
      .then(() => {
        router.push('/');
      });
  }, [router]);

  return <p className="text-center p-4">Cerrando sesión...</p>;
}

// pages/auth/register.tsx
// pages/auth/register.tsx
import { useState } from "react";
import { useRouter } from "next/router";
import Head from "next/head";

export default function RegisterPage() {
  const router = useRouter();
  const [email, setEmail] = useState("");
  const [name, setName] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);

  const validateForm = () => {
    if (!name || !email || !password) {
      setError("Todos los campos son obligatorios.");
      return false;
    }
    if (!/\S+@\S+\.\S+/.test(email)) {
      setError("Correo electrónico no válido.");
      return false;
    }
    if (password.length < 6) {
      setError("La contraseña debe tener al menos 6 caracteres.");
      return false;
    }
    return true;
  };

  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setSuccess("");

    if (!validateForm()) return;

    setIsSubmitting(true);
    try {
      const response = await fetch("http://localhost:8001/auth/register", {
        method: "POST",
        credentials: "include",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, name, password }),
      });

      if (response.ok) {
        setSuccess("¡Registro exitoso! Redirigiendo al panel...");
        setEmail("");
        setPassword("");
        setName("");

        // Mostrar el mensaje de éxito y redirigir tras 2 segundos
        setTimeout(() => {
          router.replace("/dashboard");
        }, 2000);
      } else {
        const data = await response.json();
        setError(data.message || "Error al registrarse.");
      }
    } catch (err) {
      console.error(err);
      setError("Ocurrió un error inesperado.");
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <>
      <Head>
        <title>Registro | MyApp</title>
        <meta
          name="description"
          content="Crea una cuenta en MyApp para acceder a todas tus herramientas"
        />
      </Head>

      <div className="min-h-screen flex">
        {/* Panel izquierdo */}
        <div className="w-full md:w-1/2 flex flex-col justify-center items-center p-8 bg-gray-50">
          <div className="max-w-md w-full">
            <div className="mb-12 text-center">
              <h1 className="text-3xl font-bold text-gray-900 mb-2">
                Crea una cuenta
              </h1>
              <p className="text-gray-600">
                Comienza a gestionar tus servicios fácilmente
              </p>
            </div>

            <form
              onSubmit={handleRegister}
              className="bg-white p-8 rounded-xl shadow-sm border border-gray-200"
              noValidate
            >
              {error && (
                <div
                  role="alert"
                  className="mb-4 p-3 bg-red-50 text-red-700 rounded-lg text-sm"
                >
                  {error}
                </div>
              )}

              {success && (
                <div
                  role="status"
                  className="mb-4 p-3 bg-green-50 text-green-700 rounded-lg text-sm"
                >
                  {success}
                </div>
              )}

              <div className="space-y-5">
                <div>
                  <label
                    htmlFor="name"
                    className="block text-sm font-medium text-gray-700 mb-1"
                  >
                    Nombre completo
                  </label>
                  <input
                    id="name"
                    type="text"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    required
                  />
                </div>

                <div>
                  <label
                    htmlFor="email"
                    className="block text-sm font-medium text-gray-700 mb-1"
                  >
                    Correo electrónico
                  </label>
                  <input
                    id="email"
                    type="email"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    required
                  />
                </div>

                <div>
                  <label
                    htmlFor="password"
                    className="block text-sm font-medium text-gray-700 mb-1"
                  >
                    Contraseña
                  </label>
                  <input
                    id="password"
                    type="password"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    required
                    minLength={6}
                  />
                </div>

                <button
                  type="submit"
                  className="w-full bg-indigo-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50"
                  disabled={isSubmitting}
                  aria-busy={isSubmitting}
                >
                  {isSubmitting ? "Registrando..." : "Registrarse"}
                </button>
              </div>

              <div className="mt-6 text-center">
                <p className="text-gray-600 text-sm">
                  ¿Ya tienes una cuenta?{" "}
                  <a
                    href="/auth/login"
                    className="font-medium text-indigo-600 hover:text-indigo-500"
                  >
                    Inicia sesión
                  </a>
                </p>
              </div>
            </form>

            <div className="mt-8 text-center text-sm text-gray-600">
              <p>© 2025 MyApp. Todos los derechos reservados.</p>
            </div>
          </div>
        </div>

        {/* Panel derecho */}
        <div className="hidden md:block w-1/2 bg-gradient-to-br from-indigo-600 to-indigo-800 relative">
          <div className="absolute inset-0 flex items-center justify-center p-12">
            <div className="text-white max-w-lg">
              <h2 className="text-4xl font-bold mb-4">
                Únete a la revolución digital
              </h2>
              <p className="text-xl mb-8">
                Accede a todas tus herramientas desde una única plataforma
                eficiente y segura.
              </p>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}


// pages/_app.tsx

// pages/_app.tsx
import '../styles/globals.css';
import type { AppProps } from 'next/app';
import { appWithTranslation } from 'next-i18next';
import Layout from '../components/Layout';

function MyApp({ Component, pageProps }: AppProps) {
  return (
    <Layout>
      <Component {...pageProps} />
    </Layout>
  );
}

export default appWithTranslation(MyApp);

// pages/about.tsx
import { useTranslation } from 'next-i18next';
import { serverSideTranslations } from 'next-i18next/serverSideTranslations';
import Layout from '../components/Layout';

export default function About() {
  const { t } = useTranslation('common');
  
  return (
  
    <div className="max-w-4xl mx-auto py-16 px-4 sm:px-6 lg:px-8">
      <div className="text-center">
        <h1 className="text-3xl font-extrabold text-gray-900 sm:text-4xl">
          {t('about_title')}
        </h1>
        <p className="mt-3 max-w-2xl mx-auto text-xl text-gray-500 sm:mt-4">
          {t('about_subtitle')}
        </p>
      </div>
      
      <div className="mt-12 grid grid-cols-1 gap-8 sm:grid-cols-2">
        <div className="bg-white overflow-hidden shadow rounded-lg">
          <div className="px-4 py-5 sm:p-6">
            <div className="flex items-center">
              <div className="flex-shrink-0 bg-indigo-500 rounded-md p-3">
                <svg className="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                </svg>
              </div>
              <div className="ml-5">
                <h3 className="text-lg leading-6 font-medium text-gray-900">
                  {t('about_feature1_title')}
                </h3>
              </div>
            </div>
            <p className="mt-4 text-base text-gray-500">
              {t('about_feature1_description')}
            </p>
          </div>
        </div>
        
        <div className="bg-white overflow-hidden shadow rounded-lg">
          <div className="px-4 py-5 sm:p-6">
            <div className="flex items-center">
              <div className="flex-shrink-0 bg-indigo-500 rounded-md p-3">
                <svg className="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                </svg>
              </div>
              <div className="ml-5">
                <h3 className="text-lg leading-6 font-medium text-gray-900">
                  {t('about_feature2_title')}
                </h3>
              </div>
            </div>
            <p className="mt-4 text-base text-gray-500">
              {t('about_feature2_description')}
            </p>
          </div>
        </div>
      </div>
      
      <div className="mt-12 bg-indigo-50 rounded-lg p-8">
        <div className="max-w-3xl mx-auto text-center">
          <h2 className="text-2xl font-extrabold text-gray-900 sm:text-3xl">
            {t('about_cta_title')}
          </h2>
          <p className="mt-4 text-lg text-gray-600">
            {t('about_cta_description')}
          </p>
          <div className="mt-8">
            <a 
              href="/contact" 
              className="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              {t('contact_us')}
              <svg className="ml-2 -mr-1 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14 5l7 7m0 0l-7 7m7-7H3" />
              </svg>
            </a>
          </div>
        </div>
      </div>
    </div>
 
  );
}

export const getStaticProps = async ({ locale }: { locale: string }) => ({
  props: {
    ...(await serverSideTranslations(locale, ['common'])),
  },
});

// frontend/pages/admin.tsx
import { GetServerSideProps } from "next";
import nookies from "nookies"; // library opcional para leer cookies
//import jwt from "jsonwebtoken";

export default function AdminPage() {
  return <div>Panel admin (Sólo accesible a rol=admin)</div>;
}

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const cookies = ctx.req.headers.cookie;
  if (!cookies) {
    return { redirect: { destination: "/", permanent: false } };
  }
  const parsedCookies = nookies.get(ctx);
  const raw = parsedCookies.user_info;
  if (!raw) {
    return { redirect: { destination: "/", permanent: false } };
  }
  let user;
  try {
    user = JSON.parse(raw);
  } catch {
    return { redirect: { destination: "/", permanent: false } };
  }
  if (user.role !== "admin") {
    return { redirect: { destination: "/", permanent: false } };
  }
  return { props: { } };
};


// pages/contact.tsx
import { useTranslation } from 'next-i18next';
import { serverSideTranslations } from 'next-i18next/serverSideTranslations';
import { useState } from 'react';

export default function ContactPage() {
  const { t } = useTranslation('common');
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    subject: '',
    message: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState<'success' | 'error' | null>(null);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    // Simular envío de formulario
    setTimeout(() => {
      setIsSubmitting(false);
      setSubmitStatus('success');
      setFormData({ name: '', email: '', subject: '', message: '' });
      
      // Resetear estado después de 5 segundos
      setTimeout(() => setSubmitStatus(null), 5000);
    }, 1500);
  };

  return (
    <div className="max-w-4xl mx-auto py-16 px-4 sm:px-6 lg:px-8">
      <div className="text-center">
        <h1 className="text-3xl font-extrabold text-gray-900 sm:text-4xl">
          {t('contact_title')}
        </h1>
        <p className="mt-3 max-w-2xl mx-auto text-xl text-gray-500 sm:mt-4">
          {t('contact_subtitle')}
        </p>
      </div>
      
      <div className="mt-12 grid grid-cols-1 gap-12 lg:grid-cols-2">
        <div className="bg-white shadow-xl rounded-lg p-8">
          <form onSubmit={handleSubmit} className="space-y-6">
            {submitStatus === 'success' && (
              <div className="rounded-md bg-green-50 p-4">
                <div className="flex">
                  <div className="flex-shrink-0">
                    <svg className="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <div className="ml-3">
                    <p className="text-sm font-medium text-green-800">
                      {t('contact_success_message')}
                    </p>
                  </div>
                </div>
              </div>
            )}
            
            <div>
              <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                {t('contact_form_name')}
              </label>
              <input
                type="text"
                name="name"
                id="name"
                required
                value={formData.name}
                onChange={handleChange}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-3 px-4 focus:ring-indigo-500 focus:border-indigo-500"
              />
            </div>
            
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                {t('contact_form_email')}
              </label>
              <input
                type="email"
                name="email"
                id="email"
                required
                value={formData.email}
                onChange={handleChange}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-3 px-4 focus:ring-indigo-500 focus:border-indigo-500"
              />
            </div>
            
            <div>
              <label htmlFor="subject" className="block text-sm font-medium text-gray-700">
                {t('contact_form_subject')}
              </label>
              <input
                type="text"
                name="subject"
                id="subject"
                required
                value={formData.subject}
                onChange={handleChange}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-3 px-4 focus:ring-indigo-500 focus:border-indigo-500"
              />
            </div>
            
            <div>
              <label htmlFor="message" className="block text-sm font-medium text-gray-700">
                {t('contact_form_message')}
              </label>
              <textarea
                id="message"
                name="message"
                rows={4}
                required
                value={formData.message}
                onChange={handleChange}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-3 px-4 focus:ring-indigo-500 focus:border-indigo-500"
              ></textarea>
            </div>
            
            <div>
              <button
                type="submit"
                disabled={isSubmitting}
                className="w-full inline-flex items-center justify-center px-6 py-3 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50"
              >
                {isSubmitting ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    {t('sending')}
                  </>
                ) : t('contact_form_send')}
              </button>
            </div>
          </form>
        </div>
        
        <div>
          <div className="bg-gray-50 rounded-lg p-8">
            <h2 className="text-xl font-bold text-gray-900">{t('contact_info_title')}</h2>
            <p className="mt-4 text-base text-gray-600">
              {t('contact_info_description')}
            </p>
            
            <div className="mt-8 space-y-6">
              <div className="flex items-start">
                <div className="flex-shrink-0">
                  <svg className="h-6 w-6 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                  </svg>
                </div>
                <div className="ml-3 text-base text-gray-700">
                  <p>+34 123 456 789</p>
                  <p className="mt-1">{t('contact_phone_hours')}</p>
                </div>
              </div>
              
              <div className="flex items-start">
                <div className="flex-shrink-0">
                  <svg className="h-6 w-6 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                  </svg>
                </div>
                <div className="ml-3 text-base text-gray-700">
                  <p>support@myapp.com</p>
                  <p className="mt-1">{t('contact_email_description')}</p>
                </div>
              </div>
              
              <div className="flex items-start">
                <div className="flex-shrink-0">
                  <svg className="h-6 w-6 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                </div>
                <div className="ml-3 text-base text-gray-700">
                  <p>Calle Ejemplo, 123</p>
                  <p>28000 Madrid, España</p>
                </div>
              </div>
            </div>
            
            <div className="mt-10">
              <h3 className="text-lg font-medium text-gray-900">{t('contact_social_title')}</h3>
              <div className="mt-4 flex space-x-4">
                <a href="#" className="text-gray-500 hover:text-gray-700">
                  <span className="sr-only">Facebook</span>
                  <svg className="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
                    <path fillRule="evenodd" d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z" clipRule="evenodd" />
                  </svg>
                </a>
                <a href="#" className="text-gray-500 hover:text-gray-700">
                  <span className="sr-only">Twitter</span>
                  <svg className="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84" />
                  </svg>
                </a>
                <a href="#" className="text-gray-500 hover:text-gray-700">
                  <span className="sr-only">LinkedIn</span>
                  <svg className="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z" />
                  </svg>
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export const getStaticProps = async ({ locale }: { locale: string }) => ({
  props: {
    ...(await serverSideTranslations(locale, ['common'])),
  },
});

// pages/features.tsx
import { useTranslation } from 'next-i18next';
import { serverSideTranslations } from 'next-i18next/serverSideTranslations';

import Link from 'next/link';
import Layout from '../components/Layout';

export default function FeaturesPage() {
  const { t } = useTranslation('common');
  
  const features = [
    {
      title: t('features_feature1_title'),
      description: t('features_feature1_description'),
      icon: (
        <svg className="h-8 w-8 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
        </svg>
      )
    },
    {
      title: t('features_feature2_title'),
      description: t('features_feature2_description'),
      icon: (
        <svg className="h-8 w-8 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
        </svg>
      )
    },
    {
      title: t('features_feature3_title'),
      description: t('features_feature3_description'),
      icon: (
        <svg className="h-8 w-8 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
        </svg>
      )
    },
    {
      title: t('features_feature4_title'),
      description: t('features_feature4_description'),
      icon: (
        <svg className="h-8 w-8 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
        </svg>
      )
    },
    {
      title: t('features_feature5_title'),
      description: t('features_feature5_description'),
      icon: (
        <svg className="h-8 w-8 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4m0 5c0 2.21-3.582 4-8 4s-8-1.79-8-4" />
        </svg>
      )
    },
    {
      title: t('features_feature6_title'),
      description: t('features_feature6_description'),
      icon: (
        <svg className="h-8 w-8 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z" />
        </svg>
      )
    }
  ];

  return (
  

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
        <div className="text-center">
          <h1 className="text-4xl font-extrabold text-gray-900 sm:text-5xl">
            {t('features_title')}
          </h1>
          <p className="mt-4 text-xl text-gray-600 max-w-3xl mx-auto">
            {t('features_subtitle')}
          </p>
        </div>

        <div className="mt-16">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10">
            {features.map((feature, index) => (
              <div key={index} className="bg-white rounded-xl shadow-md overflow-hidden hover:shadow-xl transition-shadow duration-300">
                <div className="p-8">
                  <div className="flex items-center justify-center w-16 h-16 bg-indigo-100 rounded-full mb-6">
                    {feature.icon}
                  </div>
                  <h3 className="text-xl font-bold text-gray-900 mb-3">{feature.title}</h3>
                  <p className="text-gray-600">{feature.description}</p>
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="mt-20 text-center">
          <div className="inline-block bg-indigo-50 rounded-full p-1">
            <div className="flex items-center">
              <p className="text-indigo-600 font-medium px-4">
                {t('features_cta_text')}
              </p>
              <Link 
                href="/auth/login" 
                className="flex-shrink-0 bg-indigo-600 text-white py-2 px-6 rounded-full font-medium hover:bg-indigo-700 transition-colors duration-300"
              >
                {t('get_started')}
              </Link>
            </div>
          </div>
        </div>
      </div>

  );
}


export const getStaticProps = async ({ locale }: { locale: string }) => ({
  props: {
    ...(await serverSideTranslations(locale, ['common'])),
  },
});

// frontend/pages/index.tsx 
// pages/index.tsx - DISEÑO MODERNIZADO
import { useTranslation } from 'next-i18next';
import Link from 'next/link';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { serverSideTranslations } from 'next-i18next/serverSideTranslations';

export default function Home() {
  const { t } = useTranslation();
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    fetch('http://localhost:8001/auth/user', {
      credentials: 'include'
    })
      .then(res => res.ok ? res.json() : null)
      .then(data => {
        if (data) setUser(JSON.parse(data));
        else setUser(null);
      })
      .catch(() => setUser(null))
      .finally(() => setLoading(false));
  }, []);

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
      <div className="text-center">
        <h1 className="text-4xl md:text-5xl font-extrabold text-gray-900 mb-6">
          {t('welcome_title')}
        </h1>
        <p className="text-xl text-gray-600 max-w-3xl mx-auto mb-12">
          {t('welcome_subtitle')}
        </p>
        
        {!loading && !user && (
          <Link href="/auth/login">
            <button className="bg-indigo-600 hover:bg-indigo-700 text-white px-8 py-4 rounded-lg font-medium text-lg shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
              {t('get_started')} &rarr;
            </button>
          </Link>
        )}
        
        {!loading && user && (
          <Link href="/dashboard">
            <button className="bg-indigo-600 hover:bg-indigo-700 text-white px-8 py-4 rounded-lg font-medium text-lg shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
              {t('go_to_dashboard')} &rarr;
            </button>
          </Link>
        )}
      </div>
      
      <div className="mt-24 grid grid-cols-1 md:grid-cols-3 gap-8">
        <div className="bg-white p-8 rounded-xl shadow-sm border border-gray-100 hover:border-indigo-100 transition-all">
          <div className="bg-indigo-100 p-3 rounded-lg w-12 h-12 flex items-center justify-center mb-6">
            <svg className="w-6 h-6 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
            </svg>
          </div>
          <h3 className="text-xl font-bold mb-3">{t('feature1_title')}</h3>
          <p className="text-gray-600">{t('feature1_description')}</p>
        </div>
        
        <div className="bg-white p-8 rounded-xl shadow-sm border border-gray-100 hover:border-indigo-100 transition-all">
          <div className="bg-indigo-100 p-3 rounded-lg w-12 h-12 flex items-center justify-center mb-6">
            <svg className="w-6 h-6 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
            </svg>
          </div>
          <h3 className="text-xl font-bold mb-3">{t('feature2_title')}</h3>
          <p className="text-gray-600">{t('feature2_description')}</p>
        </div>
        
        <div className="bg-white p-8 rounded-xl shadow-sm border border-gray-100 hover:border-indigo-100 transition-all">
          <div className="bg-indigo-100 p-3 rounded-lg w-12 h-12 flex items-center justify-center mb-6">
            <svg className="w-6 h-6 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
            </svg>
          </div>
          <h3 className="text-xl font-bold mb-3">{t('feature3_title')}</h3>
          <p className="text-gray-600">{t('feature3_description')}</p>
        </div>
      </div>
    </div>
  );
}

export async function getStaticProps({ locale }: { locale: string }) {
  return {
    props: {
      ...(await serverSideTranslations(locale, ['common']))
    }
  };
}

// frontend/pages/privacy.tsx
// pages/privacy.tsx
import { useTranslation } from 'next-i18next';
import { serverSideTranslations } from 'next-i18next/serverSideTranslations';
import Link from 'next/link';

export default function PrivacyPage() {
  const { t } = useTranslation('common');
  
  return (
    <div className="max-w-4xl mx-auto py-16 px-4 sm:px-6 lg:px-8">
      <div className="text-center">
        <h1 className="text-3xl font-extrabold text-gray-900 sm:text-4xl">
          {t('privacy_title')}
        </h1>
        <p className="mt-3 max-w-2xl mx-auto text-xl text-gray-500 sm:mt-4">
          {t('privacy_subtitle')}
        </p>
      </div>
      
      <div className="mt-12 prose prose-indigo prose-lg text-gray-500 mx-auto">
        <h2 className="text-2xl font-bold text-gray-900">{t('privacy_section1_title')}</h2>
        <p>
          {t('privacy_section1_content')}
        </p>
        
        <h2 className="mt-8 text-2xl font-bold text-gray-900">{t('privacy_section2_title')}</h2>
        <p>
          {t('privacy_section2_content')}
        </p>
        
        <h2 className="mt-8 text-2xl font-bold text-gray-900">{t('privacy_section3_title')}</h2>
        <p>
          {t('privacy_section3_content')}
        </p>
        
        <h2 className="mt-8 text-2xl font-bold text-gray-900">{t('privacy_section4_title')}</h2>
        <p>
          {t('privacy_section4_content')}
        </p>
      </div>
      
      <div className="mt-12 text-center">
        <Link legacyBehavior href="/">
          <a className="inline-flex items-center text-indigo-600 hover:text-indigo-500">
            <svg className="mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            {t('back_to_home')}
          </a>
        </Link>
      </div>
    </div>
  );
}

export const getStaticProps = async ({ locale }: { locale: string }) => ({
  props: {
    ...(await serverSideTranslations(locale, ['common'])),
  },
});

// pages/terms.tsx
import { useTranslation } from 'next-i18next';
import { serverSideTranslations } from 'next-i18next/serverSideTranslations';
import Link from 'next/link';

export default function TermsPage() {
  const { t } = useTranslation('common');
  
  return (
    <div className="max-w-4xl mx-auto py-16 px-4 sm:px-6 lg:px-8">
      <div className="text-center">
        <h1 className="text-3xl font-extrabold text-gray-900 sm:text-4xl">
          {t('terms_title')}
        </h1>
        <p className="mt-3 max-w-2xl mx-auto text-xl text-gray-500 sm:mt-4">
          {t('terms_subtitle')}
        </p>
      </div>
      
      <div className="mt-12 prose prose-indigo prose-lg text-gray-500 mx-auto">
        <h2 className="text-2xl font-bold text-gray-900">{t('terms_section1_title')}</h2>
        <p>
          {t('terms_section1_content')}
        </p>
        
        <h2 className="mt-8 text-2xl font-bold text-gray-900">{t('terms_section2_title')}</h2>
        <p>
          {t('terms_section2_content')}
        </p>
        
        <h2 className="mt-8 text-2xl font-bold text-gray-900">{t('terms_section3_title')}</h2>
        <p>
          {t('terms_section3_content')}
        </p>
        
        <h2 className="mt-8 text-2xl font-bold text-gray-900">{t('terms_section4_title')}</h2>
        <p>
          {t('terms_section4_content')}
        </p>
      </div>
      
      <div className="mt-12 text-center">
        <Link legacyBehavior href="/">
          <a className="inline-flex items-center text-indigo-600 hover:text-indigo-500">
            <svg className="mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            {t('back_to_home')}
          </a>
        </Link>
      </div>
    </div>
  );
}

export const getStaticProps = async ({ locale }: { locale: string }) => ({
  props: {
    ...(await serverSideTranslations(locale, ['common'])),
  },
});

// frontend/public/locales/en/common.json
{
  "home": "Home",
  "about": "About",
  "contact": "Contact",
  "features": "Features",
  "login": "Login",
  "dashboard": "Dashboard",
  "summary": "Summary",
  "profile": "Profile",
  "access": "Access",
  "logout": "Logout",
  "loading": "Loading...",
  "not_available": "Not available",
  "account_status": "Account Status",
  "active": "Active",
  "created_at": "Created At",
  "last_login": "Last Login",
  "profile_info": "Profile Information",
  "login_history": "Login History",
  "no_login_history": "No login history available.",
  "current_session": "Current session",
  "initial_login": "Initial login",
  "dashboard_welcome": "Welcome to your dashboard",
  "manage_profile": "Manage your profile information",
  "view_access_history": "View your access history",
  "access_denied": "Access Denied",
  "please_login": "Please login to access this page.",
  "welcome_title": "Welcome to MyApp",
  "welcome_subtitle": "The best solution for your business needs",
  "get_started": "Get Started",
  "go_to_dashboard": "Go to Dashboard",
  "feature1_title": "Secure Authentication",
  "feature1_description": "OAuth2 integration for secure and easy login.",
  "feature2_title": "Real-time Updates",
  "feature2_description": "Get instant updates without refreshing the page.",
  "feature3_title": "24/7 Support",
  "feature3_description": "Our team is always ready to help you.",
  "app_name": "MyApp",
  "privacy_title": "Privacy Policy",
  "privacy_subtitle": "Learn how we protect your information",
  "privacy_section1_title": "Information Collection",
  "privacy_section1_content": "We collect information to provide better services to all our users.",
  "privacy_section2_title": "How We Use Information",
  "privacy_section2_content": "We use the information we collect to deliver our services.",
  "privacy_section3_title": "Information Sharing",
  "privacy_section3_content": "We do not share personal information with third parties.",
  "privacy_section4_title": "Security",
  "privacy_section4_content": "We work hard to protect our users from unauthorized access.",
  "back_to_home": "Back to home",
  "terms_title": "Terms and Conditions",
  "terms_subtitle": "Our legal terms of service",
  "terms_section1_title": "Acceptance of Terms",
  "terms_section1_content": "By accessing this website, you agree to be bound by these Terms.",
  "terms_section2_title": "Use License",
  "terms_section2_content": "Permission is granted to temporarily download materials for personal use.",
  "terms_section3_title": "Disclaimer",
  "terms_section3_content": "The materials are provided 'as is'. We make no warranties.",
  "terms_section4_title": "Limitations",
  "terms_section4_content": "We shall not be liable for any damages arising from the use of our services.",
  "contact_title": "Contact Us",
  "contact_subtitle": "We'd love to hear from you",
  "contact_form_name": "Full name",
  "contact_form_email": "Email address",
  "contact_form_subject": "Subject",
  "contact_form_message": "Message",
  "contact_form_send": "Send Message",
  "contact_success_message": "Your message has been sent successfully!",
  "contact_info_title": "Contact Information",
  "contact_info_description": "Fill out the form or contact us directly using the information below.",
  "contact_phone_hours": "Monday-Friday from 9am to 5pm",
  "contact_email_description": "We'll get back to you as soon as possible.",
  "contact_social_title": "Follow us on social media",
  "sending": "Sending...",
  "about_title": "About Us",
  "about_subtitle": "Learn more about our company",
  "about_feature1_title": "Our Mission",
  "about_feature1_description": "To provide the best solutions for our customers.",
  "about_feature2_title": "Our Vision",
  "about_feature2_description": "To be the leading company in our industry.",
  "about_cta_title": "Ready to get started?",
  "about_cta_description": "Get in touch with us today and let us help you achieve your goals.",
  "contact_us": "Contact us",
  "features_title": "Our Features",
  "features_subtitle": "Everything you need to succeed",
  "features_feature1_title": "Secure Authentication",
  "features_feature1_description": "Industry-standard OAuth2 for secure and hassle-free login.",
  "features_feature2_title": "Real-time Sync",
  "features_feature2_description": "Your data is synced in real-time across all your devices.",
  "features_feature3_title": "24/7 Support",
  "features_feature3_description": "Our dedicated support team is always ready to assist you.",
  "features_feature4_title": "Advanced Security",
  "features_feature4_description": "End-to-end encryption and regular security audits.",
  "features_feature5_title": "Data Analytics",
  "features_feature5_description": "Powerful analytics tools to help you understand your data.",
  "features_feature6_title": "Custom Integrations",
  "features_feature6_description": "Integrate with your favorite tools and services.",
  "features_cta_text": "Ready to experience these features?"
}

// FRONTEND/public/locales/es/common.json

{
  "home": "Inicio",
  "about": "Acerca de",
  "contact": "Contacto",
  "features": "Características",
  "login": "Iniciar sesión",
  "dashboard": "Panel",
  "summary": "Resumen",
  "profile": "Perfil",
  "access": "Accesos",
  "logout": "Cerrar sesión",
  "loading": "Cargando...",
  "not_available": "No disponible",
  "account_status": "Estado de la cuenta",
  "active": "Activo",
  "created_at": "Creado el",
  "last_login": "Último acceso",
  "profile_info": "Información del perfil",
  "login_history": "Historial de accesos",
  "no_login_history": "No hay historial de accesos disponible.",
  "current_session": "Sesión actual",
  "initial_login": "Primer acceso",
  "dashboard_welcome": "Bienvenido a tu panel de control",
  "manage_profile": "Gestiona la información de tu perfil",
  "view_access_history": "Consulta tu historial de accesos",
  "access_denied": "Acceso denegado",
  "please_login": "Por favor inicia sesión para acceder a esta página.",
  "welcome_title": "Bienvenido a MyApp",
  "welcome_subtitle": "La mejor solución para las necesidades de tu negocio",
  "get_started": "Empezar",
  "go_to_dashboard": "Ir al panel",
  "feature1_title": "Autenticación segura",
  "feature1_description": "Integración OAuth2 para un inicio de sesión seguro y sencillo.",
  "feature2_title": "Actualizaciones en tiempo real",
  "feature2_description": "Obtén actualizaciones instantáneas sin recargar la página.",
  "feature3_title": "Soporte 24/7",
  "feature3_description": "Nuestro equipo siempre está listo para ayudarte.",
  "app_name": "MyApp",
  "privacy_title": "Política de Privacidad",
  "privacy_subtitle": "Aprende cómo protegemos tu información",
  "privacy_section1_title": "Recopilación de información",
  "privacy_section1_content": "Recopilamos información para proporcionar mejores servicios a todos nuestros usuarios.",
  "privacy_section2_title": "Cómo usamos la información",
  "privacy_section2_content": "Utilizamos la información que recopilamos para ofrecer nuestros servicios.",
  "privacy_section3_title": "Compartición de información",
  "privacy_section3_content": "No compartimos información personal con terceros.",
  "privacy_section4_title": "Seguridad",
  "privacy_section4_content": "Trabajamos duro para proteger a nuestros usuarios de accesos no autorizados.",
  "back_to_home": "Volver al inicio",
  "terms_title": "Términos y Condiciones",
  "terms_subtitle": "Nuestros términos legales de servicio",
  "terms_section1_title": "Aceptación de los términos",
  "terms_section1_content": "Al acceder a este sitio web, aceptas estar sujeto a estos Términos.",
  "terms_section2_title": "Licencia de uso",
  "terms_section2_content": "Se concede permiso para descargar materiales temporalmente para uso personal.",
  "terms_section3_title": "Descargo de responsabilidad",
  "terms_section3_content": "Los materiales se proporcionan 'tal cual'. No ofrecemos garantías.",
  "terms_section4_title": "Limitaciones",
  "terms_section4_content": "No seremos responsables de ningún daño derivado del uso de nuestros servicios.",
  "contact_title": "Contáctanos",
  "contact_subtitle": "Nos encantaría saber de ti",
  "contact_form_name": "Nombre completo",
  "contact_form_email": "Correo electrónico",
  "contact_form_subject": "Asunto",
  "contact_form_message": "Mensaje",
  "contact_form_send": "Enviar mensaje",
  "contact_success_message": "¡Tu mensaje ha sido enviado con éxito!",
  "contact_info_title": "Información de contacto",
  "contact_info_description": "Rellena el formulario o contáctanos directamente usando la información de abajo.",
  "contact_phone_hours": "Lunes a viernes de 9am a 5pm",
  "contact_email_description": "Te responderemos lo antes posible.",
  "contact_social_title": "Síguenos en redes sociales",
  "sending": "Enviando...",
  "about_title": "Acerca de nosotros",
  "about_subtitle": "Conoce más sobre nuestra empresa",
  "about_feature1_title": "Nuestra misión",
  "about_feature1_description": "Proporcionar las mejores soluciones para nuestros clientes.",
  "about_feature2_title": "Nuestra visión",
  "about_feature2_description": "Ser la empresa líder en nuestra industria.",
  "about_cta_title": "¿Listo para empezar?",
  "about_cta_description": "Contáctanos hoy y permítenos ayudarte a alcanzar tus objetivos.",
  "contact_us": "Contáctanos",
  "features_title": "Nuestras características",
  "features_subtitle": "Todo lo que necesitas para triunfar",
  "features_feature1_title": "Autenticación segura",
  "features_feature1_description": "OAuth2 estándar de la industria para un inicio de sesión seguro y sin complicaciones.",
  "features_feature2_title": "Sincronización en tiempo real",
  "features_feature2_description": "Tus datos se sincronizan en tiempo real en todos tus dispositivos.",
  "features_feature3_title": "Soporte 24/7",
  "features_feature3_description": "Nuestro equipo de soporte está siempre listo para ayudarte.",
  "features_feature4_title": "Seguridad avanzada",
  "features_feature4_description": "Encriptación de extremo a extremo y auditorías de seguridad regulares.",
  "features_feature5_title": "Análisis de datos",
  "features_feature5_description": "Potentes herramientas de análisis para ayudarte a entender tus datos.",
  "features_feature6_title": "Integraciones personalizadas",
  "features_feature6_description": "Integra con tus herramientas y servicios favoritos.",
  "features_cta_text": "¿Listo para experimentar estas características?",
  
}



Aqui tienes los archivos de configuración del nextjs

// tscofig.js

{
  "compilerOptions": {
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "noEmit": true,
    "incremental": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve"
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx"
  ],
  "exclude": [
    "node_modules"
  ]
}

// tailwind.config.ts
// tailwind.config.ts
export default {
  content: ['./pages/**/*.{ts,tsx}', './components/**/*.{ts,tsx}'],
  theme: { extend: {} },
  plugins: []
};


// package.json

{
  "name": "frontend",
  "version": "1.0.0",
  "scripts": {
    "dev": "next dev"
  },
  "dependencies": {
    "cookie": "^1.0.2",
    "next": "^13.5.11",
    "i18next": "^23.7.8",
    "next-i18next": "^15.4.2",
    "nookies": "^2.5.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@types/node": "22.15.29",
    "@types/nookies": "^1.1.0",
    "autoprefixer": "^10.4.21",
    "postcss": "^8.5.4",
    "tailwindcss": "^3.4.17",
    "typescript": "5.8.3"
  }
}


// next.config.js
// next.config.js
const { i18n } = require('./next-i18next.config');

// Ensure localeDetection is set to false as required by Next.js
const updatedI18n = {
  ...i18n,
  localeDetection: false,
};

module.exports = {
  reactStrictMode: true,
  i18n: updatedI18n,
};


// next-i18next.config.js
// next-i18next.config.js
module.exports = {
  i18n: {
    defaultLocale: 'en',
    locales: ['en', 'es'],
    localeDetection: true,
  },
  reloadOnPrerender: process.env.NODE_ENV === 'development',
};



Aqui termina todo el codigo fuente del boilerplate que estoy construyendo. Estudialo en profundidad porque me vas ayudar 
a mejorarlo, ampliarlo y optimizarlo.

Una vez que entiendas todo el codigo fuente estos son los cambios que debes aplicar:

1- AHora mismo el backend está sin carpetas, unicamente con todos los archivos en la carpeta Backend. Propon una estructura mas accesible y usable
que facilite el escalado y modularación, asi como extender el programa


2- Analiza en profundidad el codigo fuente y  Refactoriza el código fuente de la aplicación para mejorar modularidad, escalabilidad, accesibilidad y mantenibilidad, 
siguiendo estrictamente estas reglas y aplicando los cambios que consideres necesarios para que se cumplan:


3- propon mejoras sobre la logica actual, sin ampliar a nuevas logicas, solo la actual

Adelante! Si no tienes ninguna duda que comience el analisis de mi proyecto.