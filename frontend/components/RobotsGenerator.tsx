// frontend/components/RobotsGenerator.tsx
import { useState } from 'react';
import { useTranslation } from "next-i18next";
import { Rule } from './FirewallManager';

interface RobotsGeneratorProps {
  rules: Rule[];
  isExpanded: boolean;
  toggleExpand: () => void;
}

export default function RobotsGenerator({ rules, isExpanded, toggleExpand }: RobotsGeneratorProps) {
  const { t } = useTranslation('common');
  const [robotsContent, setRobotsContent] = useState('');
  const [isCopied, setIsCopied] = useState(false);

  const generateRobotsTxt = () => {
    let content = `User-agent: *\n`;
    rules.forEach(rule => {
      if (rule.policy === 'block') {
        content += `Disallow: /${rule.pattern}\n`;
      } else if (rule.policy === 'allow') {
        content += `Allow: /${rule.pattern}\n`;
      }
    });
    content += `\n# Generated by LLM Firewall\n`;
    setRobotsContent(content);
  };

  const copyToClipboard = () => {
    navigator.clipboard.writeText(robotsContent);
    setIsCopied(true);
    setTimeout(() => setIsCopied(false), 2000);
  };

  return (
    <div className="bg-white rounded-2xl shadow-xl overflow-hidden">
      <button 
        className={`w-full p-6 text-left flex justify-between items-center hover:bg-gray-50 transition-colors ${isExpanded ? 'bg-gray-50' : ''}`}
        onClick={toggleExpand}
        aria-expanded={isExpanded}
        aria-label={isExpanded ? t('collapse_section') : t('expand_section')}
      >
        <div className="flex items-center">
          <div className="bg-blue-500 w-10 h-10 rounded-lg flex items-center justify-center text-white mr-4">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
            </svg>
          </div>
          <div>
            <h2 className="text-2xl font-bold text-gray-800">{t('robots_generator')}</h2>
            <p className="text-gray-600 mt-1">{t('robots_generator_description')}</p>
          </div>
        </div>
        <div className="flex items-center">
          <div className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium mr-4">
            {t('important')}
          </div>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className={`h-6 w-6 transform transition-transform ${isExpanded ? 'rotate-180' : ''}`}
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
          </svg>
        </div>
      </button>
      
      {isExpanded && (
        <div className="p-6 space-y-4">
          <button
            onClick={generateRobotsTxt}
            className="bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white px-6 py-2 rounded-lg font-medium shadow-md transition-all duration-300"
          >
            {t('generate_robots')}
          </button>
          
          {robotsContent && (
            <div className="mt-6 border border-gray-200 rounded-xl overflow-hidden">
              <div className="bg-gray-50 px-4 py-2 flex justify-between items-center">
                <span className="text-sm font-medium text-gray-700">{t('robots_content')}</span>
                <button
                  onClick={copyToClipboard}
                  className={`flex items-center px-3 py-1 rounded-lg text-sm font-medium ${
                    isCopied ? 'bg-green-100 text-green-800' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                  }`}
                >
                  {isCopied ? (
                    <>
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                      {t('copied')}
                    </>
                  ) : (
                    <>
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                      </svg>
                      {t('copy_to_clipboard')}
                    </>
                  )}
                </button>
              </div>
              <textarea
                readOnly
                value={robotsContent}
                className="w-full h-48 p-4 font-mono text-sm bg-white"
              />
            </div>
          )}
        </div>
      )}
    </div>
  );
}